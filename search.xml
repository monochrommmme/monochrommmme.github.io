<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言笔记-基础</title>
    <url>/2024/05/13/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>史前产物，内容很基础，因为完全是应付学业用所以既斤斤计较，又一点也不深入。参考有风险，阅读须谨慎！</p>
<span id="more"></span>

<h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p><a href="https://zhuanlan.zhihu.com/p/354400717">c语言vscode环境配置</a><br><a href="https://blog.csdn.net/qq_39621009/article/details/122817826">修改cmd控制台默认代码页编码的几种方法【GBK、UTF-8】</a>utf-8:<code>chcp 65001</code> gbk:<code>chcp 936</code></p>
<p>参考资料：<br><a href="https://wangdoc.com/clang/">C 语言教程 - 网道</a></p>
<h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><p>标识符命名规范<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118702744255.jpg"></p>
<p>常量和变量<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118723671242.jpg"></p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118727532367.jpg"></p>
<p>函数<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240513161005.png"></p>
<p>输入输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">/*引用头文件stdio.h；std即standard；</span></span></span><br><span class="line"><span class="comment"><span class="meta">io指输入输出；</span></span></span><br><span class="line"><span class="comment"><span class="meta">.h代表这是头文件；</span></span></span><br><span class="line"><span class="comment"><span class="meta">所有#开头的行表示预编译指令，结尾没有分号*/</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;今天是2024年2月17日!\n&quot;</span>);</span><br><span class="line">&#125;<span class="comment">/*大括号内部叫代码块，可执行语句必须在代码块里面；</span></span><br><span class="line"><span class="comment">void是变量名，不需要返回数据；main()&#123;&#125;指唯一的主函数；</span></span><br><span class="line"><span class="comment">这里使用了头文件中的print()函数*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b,sum;<span class="comment">//声明语句，和下方执行语句两者形成一个函数体</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<span class="comment">/*输入两个值赋予a和b；</span></span><br><span class="line"><span class="comment">输入时可以用空格隔开后enter，也可以分别输入再enter；</span></span><br><span class="line"><span class="comment">&amp;是取地址符，每个变量都存在指向其内存的地址*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d,b= %d\n&quot;</span>,a,b);<span class="comment">//%d套用“,”后的int数据值</span></span><br><span class="line">sum=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum);<span class="comment">//%d套用“,”后的数据值</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回数据“0”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240513163456.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line">        z = x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        z = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;<span class="comment">//自定义的max方法，处理对象是x,y，结果值为z</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个数为%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二个数为%d\n&quot;</span>,b);</span><br><span class="line">    c=max(a,b);<span class="comment">//输入两个数据，将a和b交给max函数处理，给c赋予max结果返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更大的数是%d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以将自定义的max函数作为头文件单独保存和调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//举例max.h和main.c在相同目录下时，max.h的内容：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y)&#123;</span><br><span class="line">        z = x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        z = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.c内容是：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./max.h&quot;</span><span class="comment">//&quot;./&quot;省略也没关系</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第一个数为%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二个数为%d\n&quot;</span>,b);</span><br><span class="line">    c=max(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更大的数是%d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样结果是一样的</span></span><br></pre></td></tr></table></figure>
<p>注：如果函数的参数是一个变量，那么调用时，传入的是这个变量的值的拷贝，而不是变量本身。可以使用之后的指针来实现</p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/943D7A7E1E71632557D56B71AE852259.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/3C30149B091733B112C2C9A64CAABE1A.png"></p>
<p><code>exit()</code>函数用来终止整个程序的运行。一旦执行到该函数，程序就会立即结束。该函数的原型定义在头文件<code>stdlib.h</code>里面。在main()函数里面，exit()等价于使用return语句。其他函数使用exit()，就是终止整个程序的运行，没有其他作用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序运行成功</span></span><br><span class="line"><span class="comment">// 等同于 exit(0);</span></span><br><span class="line"><span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序异常中止</span></span><br><span class="line"><span class="comment">// 等同于 exit(1);</span></span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE);</span><br></pre></td></tr></table></figure>

<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/43DC55DEAE78763950BC0739B10DA68A.png"></p>
<p>全局变量和局部变量<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240513170305.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240513170614.png"><br>全局变量和局部变量同名时，局部变量优先</p>
<h3 id="数据类型和计算"><a href="#数据类型和计算" class="headerlink" title="数据类型和计算"></a>数据类型和计算</h3><p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118731678856.jpg"></p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/2A14B73E7A86EDD76385BA6F2197542B.png"><br><em>这里的字符串是个类，c语言没有这种数据。数据在双引号内</em><br>补充：</p>
<blockquote>
<p>%p：指针<br>%%：输出一个百分号<br>%u：无符号整数（unsigned int）<br>%hd：十进制 short int 类型<br>%g：6个有效数字的浮点数。整数部分一旦超过6位，就会自动转为科学计数法，指数部分的e为小写<br>%G：等同于%g，唯一的区别是指数部分的E为大写<br>%#o：显示前缀0的八进制整数<br>%#x：显示前缀0x的十六进制整数<br>%#X：显示前缀0X的十六进制整数</p>
</blockquote>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118754488079.jpg"></p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118766210475.jpg"><br><em>（以上适用于windows）</em></p>
<p>signed和unsigned<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/0AF722CC3186BB7EBCD7733CD0197E72.png"></p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17118770565485.jpg"><br><em>char类型本质上就是个整型。存放的其实是个对应字符的ASCII码，所以前面就算有unsigned也不会报错</em><br><a href="https://zhuanlan.zhihu.com/p/579787917">什么是ASCII码，ASCII码值的大小顺序是怎么样 - 知乎</a><br>常见ASCII码的大小规则：0-9&lt;A-Z&lt;a-z。<br>几个常见字母的ASCII码大小： “A”为65；“a”为97；“0”为 48。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a<span class="number">-32</span>);<span class="comment">//A</span></span><br><span class="line"><span class="type">char</span> c1 =<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c1);<span class="comment">//c 取最后的一个字符（输出取最后，输入取最前）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a = <span class="string">&#x27;B&#x27;</span>; <span class="comment">// 等同于 char a = 66;</span></span><br><span class="line"><span class="type">char</span> b = <span class="string">&#x27;C&#x27;</span>; <span class="comment">// 等同于 char b = 67;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + b); <span class="comment">// 输出 133</span></span><br></pre></td></tr></table></figure>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/A9559D695785D2E6950D0B553F76ABBA.png"><br><em>这四种赋值都是等价的</em></p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/CEA017C2609971B96FBB8E6F2AE5B049.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">1</span>/<span class="number">3</span>);<span class="comment">//结果为0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,<span class="number">1</span>/<span class="number">3</span>);<span class="comment">//结果为0.000...</span></span><br><span class="line"><span class="comment">/*原因是c语言中整型除以整型还是整型，</span></span><br><span class="line"><span class="comment">1/3结果为0，然后转型成double类型*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">1.0</span>/<span class="number">3</span>)<span class="comment">//结果为0.333333...</span></span><br></pre></td></tr></table></figure>

<p>自动类型转换：如应为小数类型的0.998直接给你变成整型的0</p>
<p>强制类型转换：<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/31D4413C47686EA1A3909A69A91B5D53.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> temp = <span class="number">3.99f</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,temp);<span class="comment">//3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,temp);<span class="comment">//0.000000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,(<span class="type">double</span>)<span class="number">6</span>/<span class="number">3</span>);<span class="comment">//2.000000</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,(<span class="type">float</span>)temp);<span class="comment">//3.000000</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/1E1E030CB2D22BB04692EFF0D9C086CA.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/6E496766FB83D612DB0C34977DAF3583.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/4165D512A8486301EAD368EF0028EC54.png"></p>
<p>sizeof函数<br>sizeof是 C 语言提供的一个运算符，返回某种数据类型或某个值占用的字节数量。它的参数可以是数据类型的关键字，也可以是变量名或某个具体的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%u&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">float</span>));<span class="comment">//4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%zd&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span>));<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="keyword">sizeof</span>(<span class="type">int</span>);<span class="comment">// 参数为数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i;<span class="comment">// 参数为变量</span></span><br><span class="line"><span class="keyword">sizeof</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">sizeof</span>(<span class="number">3.14</span>);<span class="comment">// 参数为数值</span></span><br></pre></td></tr></table></figure>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/0C708102E2D6DB29A57BD32F1D9EB190.png"></p>
<p>算数运算符<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/FC5DC4F496DC6661C71A0600F0B0CA08.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">++a+b;<span class="comment">//a=2,b=2</span></span><br><span class="line">a+++b;<span class="comment">//a=2,b=2</span></span><br><span class="line"><span class="comment">//不存在共用</span></span><br></pre></td></tr></table></figure>

<p>赋值运算符<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/2F14D68CBFA03D6DC36749309B98242F.png"></p>
<p>比较运算符&#x2F;关系运算符<br>1为真0为假。没有java的布尔类型。<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/AE2370D76DB7568E9A954CF5B713EFDD.png"></p>
<p>逻辑运算符<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/C543BCD3BE601DDC39FE44263243B1D6.png"></p>
<h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><p>if-else语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你的成绩\n&quot;</span>);</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt; <span class="number">60</span>)<span class="comment">//括号中是条件语句</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;成绩不合格\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;成绩合格\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入数据有误\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//()内判断真假，真执行&#123;&#125;语句，假执行else后语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch语句<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/F99BF1698ED7327F29F618A5A526307B.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> grade;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;grade);</span><br><span class="line">    <span class="keyword">switch</span>(grade)<span class="comment">//得是整型（char类型也算）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//break表示中断，不继续这个代码块的运行</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:<span class="comment">//输入表达式和任意case表达式不符时运行默认内容</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入数据有误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for循环<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/84CA10022989C6D5F63CFFB3A68C04AF.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*计算1到100之和*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num = num + i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>,i);</span><br><span class="line">        <span class="comment">/*可以看出循环执行了100次</span></span><br><span class="line"><span class="comment">        但i的最终值是101，因为最后循环执行之后还会自增，但是已经没有意义</span></span><br><span class="line"><span class="comment">        循环中赋值的i只在循环中有效*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>while循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//同样可以计算1~100的和</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum等于%d&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sum等于5050</span></span><br></pre></td></tr></table></figure>

<p>do-while循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和while循环的区别是无论如何先运行一次执行语句</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125; <span class="keyword">while</span>(i &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i等于%d&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//i等于9</span></span><br></pre></td></tr></table></figure>

<p>练习：控制台输出乘法口诀表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">1</span>;y &lt;= <span class="number">9</span>;y++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">1</span>;x &lt;= y;x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d &quot;</span>,x,y,x*y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(y &lt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">//为防止最后输出多余的一行，单拎出来输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1*1=1 </span></span><br><span class="line"><span class="comment">1*2=2 2*2=4 </span></span><br><span class="line"><span class="comment">1*3=3 2*3=6 3*3=9 </span></span><br><span class="line"><span class="comment">1*4=4 2*4=8 3*4=12 4*4=16 </span></span><br><span class="line"><span class="comment">1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 </span></span><br><span class="line"><span class="comment">1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 </span></span><br><span class="line"><span class="comment">1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 </span></span><br><span class="line"><span class="comment">1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 </span></span><br><span class="line"><span class="comment">1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>continue语句<br>用于在循环体内部终止本轮循环，进入下一轮循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d不是1~10之间的3的倍数\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>break语句<br>在switch语句中时,作用是跳出switch结构，执行之后的代码；<br>在循环语句中，作用是跳出当前内循环语句，执行之后的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算2到100之间的质数之和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>; <span class="comment">// 初始化质数之和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>;i++) <span class="comment">// 遍历2到100之间的数字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> is_prime = <span class="number">1</span>; <span class="comment">// 假设当前数字是质数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt; i; j++) <span class="comment">// 检查当前数字是否能被较小的数字整除</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                is_prime = <span class="number">0</span>; <span class="comment">// 如果能整除，标记为非质数</span></span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 不需要继续检查，提高效率</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_prime)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d是质数\n&quot;</span>,i);<span class="comment">// 打印每个质数</span></span><br><span class="line">            num = num + i; <span class="comment">// 将质数添加到总和中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2到100之间的质数之和为：%d\n&quot;</span>, num); <span class="comment">// 打印质数的总和</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>goto语句<br>用于跳到指定的标签名。会破坏结构化编程，建议不要轻易使用。也可以用于跳出某个循环</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    infinite_loop:<span class="comment">//标签名</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">goto</span> infinite_loop;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为Hello,world\n的无限循环</span></span><br></pre></td></tr></table></figure>

<p>形参和实参<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240512180445.png"></p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针是一个值，这个值代表有一个内存地址，因此指针相当于指向某内存地址的路标。通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配</p>
<p>字符<code>*</code>表示指针，通常跟在类型关键字的后面，表示指针指向的是什么类型的值。比如<code>char*</code>表示一个指向字符的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* intPtr;</span><br><span class="line"><span class="type">int</span> * intPtr;</span><br><span class="line"><span class="type">int</span> *intPtr;</span><br><span class="line"><span class="comment">//等效</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同时声明两个指针时</span></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="type">int</span> * foo, * bar;</span><br><span class="line"><span class="comment">// 错误，结果成了foo是整型指针变量，bar是整型变量</span></span><br><span class="line"><span class="type">int</span>* foo, bar;</span><br></pre></td></tr></table></figure>

<p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用<code>&amp;</code>运算符访问的地址，它表示了在内存中的一个地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> var_runoob = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p = &amp;var_runoob;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;var_runoob 变量的地址： %p\n&quot;</span>, p);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;var_runoob 变量的地址： %p\n&quot;</span>,&amp;var_runoob);<span class="comment">//等效</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var_runoob 变量的地址： 000000000061FE14</span></span><br><span class="line"><span class="comment">var_runoob 变量的地址： 000000000061FE14</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/7E9766D228CA4785CC79D3A531230940.png"></p>
<p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span>  var = <span class="number">20</span>;   <span class="comment">/* 实际变量的声明 */</span></span><br><span class="line">   <span class="type">int</span>* ip;        <span class="comment">/* 指针变量的声明 */</span></span><br><span class="line"> </span><br><span class="line">   ip = &amp;var;  <span class="comment">/* 在指针变量中存储 var 的地址 */</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;var 变量的地址: %p\n&quot;</span>, &amp;var  );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 在指针变量中存储的地址 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;ip 变量存储的地址: %p\n&quot;</span>, ip );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 使用指针访问值 */</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var 变量的地址: 000000000061FE14</span></span><br><span class="line"><span class="comment">ip 变量存储的地址: 000000000061FE14</span></span><br><span class="line"><span class="comment">*ip 变量的值: 20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>澄清一下，<code>p</code>真的是一个指向、一个指针，是地址而不是地方，对<code>*p</code>赋值是对p指向的内存地址存储的值赋值</p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/956ED3608F9B808DA80778B425D3E987.png"></p>
<p>空指针&#x2F;NULL指针在C语言中是一个常量，表示地址为0的内存空间，这个地址是无法使用的，读写该地址会报错</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span>  *ptr = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;ptr 的地址是 %p\n&quot;</span>, ptr  );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ptr 的地址是 0000000000000000</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/DCA01E1CBE790AEB81279ACB34F07361.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/1FA44ED7B476D0FC45A5B56A97A3A5E5.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/AB1F434B11FB843D0A2928A80D7B5E87.png"></p>
<p>指针的一个用例<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/239CA9DEC49B2FCF0F3BAE809438E0CB.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/E3BE36359B509E0CF60C5D8758C0A092.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/563A54C7891EFB14A8189F19323AAE65.png"></p>
<p>函数指针<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/026581DEE95822C53DBFCD8981F632E7.png"><br>对于任意函数的五种调用写法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">print(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">(*print)(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line">(&amp;print)(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 写法四</span></span><br><span class="line">(*print_ptr)(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 写法五</span></span><br><span class="line">print_ptr(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/40DA60536120D13643EADB167ADA85FE.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/BA886C8023AF2276A4B62FBDE92553F1.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/05089E0CBB1EA7C3FEBA6FCC6708ADD6.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];<span class="comment">//数据类型</span></span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>][<span class="number">9</span>][<span class="number">8</span>];<span class="comment">//三维数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">boy</span>[10];</span><span class="comment">//构造类型</span></span><br></pre></td></tr></table></figure>

<p>一维数组的初始化<br>在定义数组的同时进行赋值被称为初始化。全局数组若不进行初始化，编译器将其初始化为0<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/23A37AA462099A742E2E4E4B26265F58.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/26DDF9CFD44A73E29B3F8D8C1967036B.png"></p>
<p><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/17132621478849.jpg"></p>
<p>二维数组和多维数组<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/B56B473FEAEC60D00AB085DBEDB09C53.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/99BCB14A950CF5A3F15512DE0FFEFD94.png"></p>
<p>char数组<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/194652735B8E074DB4C9CAF9557D6B74.png"><br><em>利用sizeof()计算元素个数时不要忘记还有个\0</em><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/57ADB8BD34225C3EA28EA76C9B74A225.png"><br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/FC4AD7FFFE05C2651F01D37B3C986DA3.png"></p>
<p>数组元素的引用<br>数组名是一个地址的<strong>常量</strong>，代表数组中首个元素的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>,arr);<span class="comment">//arr = 000000000061FE00</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[0] = %p\n&quot;</span>,&amp;arr[<span class="number">0</span>]);<span class="comment">//&amp;arr[0] = 000000000061FE00</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr = %p\n&quot;</span>,&amp;arr);<span class="comment">//&amp;arr = 000000000061FE00</span></span><br><span class="line">&#125;<span class="comment">//这些十六进制数都是内存地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span>;</span><br></pre></td></tr></table></figure>

<p>线性查找<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240512171015.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//一个例子</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">  <span class="type">int</span> size = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//求数组长度</span></span><br><span class="line">  <span class="type">int</span> key = <span class="number">7</span>;<span class="comment">//需要查询的</span></span><br><span class="line">  <span class="type">int</span> flag = <span class="number">-1</span>;<span class="comment">//记号</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key == arr[i])&#123;</span><br><span class="line">      flag = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(flag == <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组中没有%d这个值&quot;</span>,key);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组中%d这个值的序号是%d&quot;</span>,key,flag);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序二分法及递归算法"><a href="#排序二分法及递归算法" class="headerlink" title="排序二分法及递归算法"></a><em>排序二分法及递归算法</em></h3><p><strong>冒泡排序</strong><br>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/bubbleSort.gif"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i, j, temp;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">                        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                                temp = arr[j];</span><br><span class="line">                                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123; <span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span> &#125;;</span><br><span class="line">        <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">        bubble_sort(arr, len);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3 5 9 22 32 34 35 37 50 55 64 70 82 89 </span></span><br></pre></td></tr></table></figure>
<p><em>人话：把最大&#x2F;最小的拎出去后对剩下的做同样的事</em></p>
<p>冒泡排序法效率低，数据规模大时尽量别用</p>
<p><strong>二分查找</strong><br>二分查找（Binary Search）算法，也叫折半查找算法。二分查找的思想非常简单，有点类似分治的思想。二分查找针对的是一个有序的数据集合，每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/QQ20240513151604.png"><br>二分查找的过程就像上图一样，如果中间值大于查找值，则往数组的左边继续查找，如果小于查找值则往右边继续查找。二分查找的思想虽然非常简单，但是查找速度非常长，二分查找的时间复杂度为O(logn)。虽然二分查找的时间复杂度为O(logn)但是比很多O(1)的速度都要快，因为O(1)可能标示一个非常大的数值，比例O(1000)。我们来看一张二分查找与遍历查找的效率对比图。<br><img src="/../images/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/v2-e29a31c78bcc0d07c612adc77acc09a0_b.gif"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 half_find 函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">half_find</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> length, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (key &gt; arr[mid]) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (high &gt;= low &amp;&amp; arr[mid] != key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//元素下标不会是-1.意思就是没找到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>&#125;;</span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> target = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 half_find 函数查找目标元素的索引</span></span><br><span class="line">    <span class="type">int</span> index = half_find(arr, length, target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;目标元素 %d 在数组中的索引为 %d\n&quot;</span>, target, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数组中未找到目标元素 %d\n&quot;</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目标元素 11 在数组中的索引为 5</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>笔记</tag>
        <tag>应试</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Hexo搭建个人博客（二）进行一些美化</title>
    <url>/2024/05/02/%E9%80%9A%E8%BF%87Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>对单调的blog页面添加一些组件，进行一些美化</p>
<span id="more"></span>

<p>参考材料：<a href="https://theme-next.js.org/docs/"><strong>Documentation | NexT</strong></a>；<a href="https://hexo.io/zh-cn/docs/"><strong>Hexo文档</strong></a>；<a href="https://zhuanlan.zhihu.com/p/102592286"><strong>从零开始搭建个人博客（超详细）</strong></a>；<a href="https://zhuanlan.zhihu.com/p/618864711"><strong>Hexo+Next主题搭建个人博客+优化全过程（完整详细版）</strong></a>；<a href="https://aplayer.js.org/#/home?id=options"><strong>Home - APlayer</strong></a>；<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md"><strong>APlayer GitHub</strong></a>；<a href="https://github.com/theme-next/theme-next-pjax"><strong>hexo-next-pjax文档</strong></a>；<a href="https://hakurei.red/2019/11/25/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80APlayer%E6%92%AD%E6%94%BE%E5%99%A8/#APlayer"><strong>为Hexo博客添加全局APlayer播放器</strong></a></p>
<h3 id="设置基本信息"><a href="#设置基本信息" class="headerlink" title="设置基本信息"></a>设置基本信息</h3><p>用npm<br><code>cd [folder]]</code><br><code>npm install hexo-theme-next</code>或</p>
<p>或用git下载next主题<br><code>git clone https://github.com/next-theme/hexo-theme-next themes/next</code></p>
<p>打开根目录的_config.yml文件，将主题改为next</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span>   </span><br></pre></td></tr></table></figure>

<p>将.&#x2F;theme&#x2F;next目录下的_config.yml的内容拷贝，在blog主目录下新建名为”_config.next.yml”的文件，将拷贝内容粘贴进去。将需要个性化修改的配置文件单拎出来总是会安全方便一些</p>
<p>添加信息，修改语言和时区</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">monoch-space</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">monoch-</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>

<p>next提供了四种主题以及深色模式的选择。<em>第三第四个主题的区别是边框的显著与否吧，大概</em></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="拓展菜单"><a href="#拓展菜单" class="headerlink" title="拓展菜单"></a>拓展菜单</h3><p>例如想添加tags,categories和about的菜单，则对_Config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<p>其中||后面的是图标名，前面的是目标链接</p>
<p>在根目录中打开git bash，输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>在blog\source_posts中可以看到新的tags和about文件夹，里面都有index.md文件，对其进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-04-26 22:07:08</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-04-26 22:07:08</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2024-04-26 22:07:08</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h3><p><code>cd [folder]</code><br><code>npm install hexo-generator-searchdb</code></p>
<p>对_config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在_config.yml添加字段：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="建站时间"><a href="#建站时间" class="headerlink" title="建站时间"></a>建站时间</h3><p>对_config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2024</span>   <span class="comment">#建站时间</span></span><br></pre></td></tr></table></figure>

<h3 id="文章末尾版权声明"><a href="#文章末尾版权声明" class="headerlink" title="文章末尾版权声明"></a>文章末尾版权声明</h3><p>在_config.next.yml添加字段：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
<p><a href="https://zhuanlan.zhihu.com/p/20641764">“知识共享”（CC协议）简单介绍</a></p>
<h3 id="文章字数和阅读时间"><a href="#文章字数和阅读时间" class="headerlink" title="文章字数和阅读时间"></a>文章字数和阅读时间</h3><p>下载插件<br><code>npm install hexo-symbols-count-time --save</code></p>
<p>在blog根目录下_config.yml添加字段：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span>    </span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>

<p>对_config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="添加社交媒体链接"><a href="#添加社交媒体链接" class="headerlink" title="添加社交媒体链接"></a>添加社交媒体链接</h3><p>对_config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">Music:</span> <span class="string">https://music.163.com/#/user/home?id=1443483816</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span><br></pre></td></tr></table></figure>

<p><code>||</code>之后是图标名，可以在<a href="https://fontawesome.com/icons"><strong>Font Awesome</strong></a>进行查找</p>
<h3 id="设置博客头像"><a href="#设置博客头像" class="headerlink" title="设置博客头像"></a>设置博客头像</h3><p>对_config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/monoch-.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>url后路径的images文件夹在theme文件夹中<br>rounded是头像圆形显示<br>rotated是否跟随鼠标旋转</p>
<h3 id="右上角github横幅"><a href="#右上角github横幅" class="headerlink" title="右上角github横幅"></a>右上角github横幅</h3><p>对_config.next.yml进行编辑：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/monochrommmme</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure>

<h3 id="实现全局音乐播放"><a href="#实现全局音乐播放" class="headerlink" title="实现全局音乐播放"></a>实现全局音乐播放</h3><p>参考：</p>
<p>安装APlayer插件<br><code>npm install --save hexo-tag-aplayer</code></p>
<p>打开blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_layout.swig，添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- APlayer本体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-id</span>=<span class="string">&quot;8885348672&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-autoplay</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-volume</span>=<span class="string">&quot;0.55&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-theme</span>=<span class="string">&quot;#cc543a&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-lrctype</span>=<span class="string">&quot;0&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>安装pjax插件<br><code>$ git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax</code></p>
<p>编辑_config.next.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pjax:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>对blog\themes\next\layout_partials\head\head.swig进行编辑：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; theme.android_chrome_color &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Hexo &#123;&#123; hexo_version &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--pjax：防止跳转页面音乐暂停--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之所以不部署在_layout.swig是因为实践时发现，刷新某篇文章后会进入html源代码界面，很神秘</p>
<p>更新pjax的方法<br><code>$ cd themes/next/source/lib/pjax</code><br><code>$ git pull</code></p>
<hr>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Hexo搭建个人博客（一）配置和部署</title>
    <url>/2024/04/27/%E9%80%9A%E8%BF%87Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%E9%85%8D%E7%BD%AE%E5%92%8C%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过hexo和github page从零搭建个人博客</p>
<span id="more"></span>

<p>参考材料：<a href="https://hexo.io/zh-cn/docs/"><strong>Hexo文档</strong></a>；<a href="https://zhuanlan.zhihu.com/p/102592286"><strong>从零开始搭建个人博客（超详细）</strong></a>；<a href="https://zhuanlan.zhihu.com/p/618864711"><strong>Hexo+Next主题搭建个人博客+优化全过程（完整详细版）</strong></a></p>
<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>首先下载和配置<a href="https://git-scm.com/"><strong>git</strong></a>和<a href="https://nodejs.cn/"><strong>Nodejs</strong></a>的环境</p>
<p>Nodejs在可能需要管理员权限才能使用npm工具，遇到问题可以参考<a href="https://blog.csdn.net/mr__sun__/article/details/119140624"><strong>Windows下使用npm显示权限不够</strong></a>修改nodejs文件夹Users权限，或以管理员身份打开windows powershell到指定文件夹再操作；npm下载不更换国内镜像源的话可能需要科学上网</p>
<h2 id="绑定GitHub"><a href="#绑定GitHub" class="headerlink" title="绑定GitHub"></a>绑定GitHub</h2><p>git初始化<br><code>cd [folder]</code><br><code>git init</code></p>
<p>在github中创建新的资源库，并将repository name改成”你的用户名.github.io”，使得最后repository页面网址为<code>https://github.com/你的用户名/你的用户名.github.io</code>的形式；将id_rsa.pub的内容拷贝到Settings的SSH keys里面</p>
<p>验证<br><code>ssh -T git@github.com</code></p>
<h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>安装Hexo<br><code>cd [folder]</code><br><code>npm install -g hexo-cli</code><br><em>本命令相当于执行了以下几步：<br><code>git clone hexo-starter</code>和<code>hexo-theme-landscape</code>主题到当前目或指定目录。<br>使用Yarn 1、pnpm 或npm包管理器下载依赖（如有已安装多个，则在前面的优先）。npm 默认随 Node.js 安装。</em></p>
<p>检查npm下载<br><code>npm list -g --depth=0</code></p>
<p>初始化<br><code>hexo init [folder]</code><br><code>cd [folder]</code><br><code>npm install</code><br>生成的文件中</p>
<ul>
<li>_config.yml 可以在此配置网站大部分参数</li>
<li>package.json 记录了Hexo的插件信息</li>
<li>scaffolds Hexo会根据scaffold中的模板创建文件</li>
<li>source 存放用户的各种资源，如markdown文章、媒体资源等</li>
<li>themes Hexo会根据主题来生成静态页面</li>
<li>node_modules 依赖包下载的位置</li>
</ul>
<p>编辑blog根目录下_config.yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:你的用户名/你的用户名.github.io.git</span>  <span class="comment">#仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment">#git下branch的名字，老版本是master</span></span><br></pre></td></tr></table></figure>

<p>输入指令<br><code>hexo clean</code> 用于清除缓存文件 (db.json) 和已生成的静态文件 (public)<br><code>hexo generate</code>或<code>hexo g</code> 生成静态文件<br><code>hexo server</code>或<code>hexo s</code> 启动本地服务器，默认情况下的网址为”localhost:4000”<br>这时就能离线查看网站的样子了</p>
<p>安装部署插件hexo-deployer-git<br><code>npm install hexo-deployer-git --save</code><br><code>hexo deploy</code>或<code>hexo d</code> 用于部署网站，构建在GitHub的服务器中</p>
<hr>
]]></content>
      <categories>
        <category>折腾记录</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
